generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EventStatus {
  ACTIVE
  EXPIRED
}

model UserAuth {
  userID    Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String   @default("user")
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile        UserProfile?
  activities     Activity[]      @relation("CreatedActivities")
  participations Participation[]
}

model UserProfile {
  profileID        Int      @id @default(autoincrement())
  userID           Int      @unique
  firstName        String
  lastName         String
  phoneNumber      String   @default("unknown")
  dateOfBirth      DateTime
  gender           String
  healthConditions String?  @default("none")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user UserAuth @relation(fields: [userID], references: [userID])
}

model Activity {
  activityID      Int         @id @default(autoincrement())
  title           String
  description     String      @db.Text
  startDate       DateTime
  endDate         DateTime
  location        String
  maxParticipants Int
  reward          String
  createdBy       Int
  status          EventStatus @default(ACTIVE)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  creator        UserAuth        @relation("CreatedActivities", fields: [createdBy], references: [userID])
  participations Participation[]
  images         Image[]
}

model Participation {
  participationID Int @id @default(autoincrement())
  userID          Int
  activityID      Int
  

  whyParticipate   String @db.Text
  emergencyContact String
  status           String @default("pending") // pending, approved, rejected

  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     UserAuth @relation(fields: [userID], references: [userID])
  activity Activity @relation(fields: [activityID], references: [activityID], onDelete: Cascade)
  trees ParticipationTree[]
}

model Image {
  imageID    Int      @id @default(autoincrement())
  activityID Int
  assetID    String
  publicID   String
  url        String
  secureUrl  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  activity Activity @relation(fields: [activityID], references: [activityID], onDelete: Cascade)
}

model Tree {
  treeID           Int      @id @default(autoincrement())
  name             String
  description      String   @db.Text
  carbonAbsorption Int      
  imageUrl         String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  participations ParticipationTree[]
}

model ParticipationTree {
  participationID Int
  treeID         Int

  participation Participation @relation(fields: [participationID], references: [participationID])
  tree          Tree          @relation(fields: [treeID], references: [treeID])

  @@id([participationID, treeID])
}
